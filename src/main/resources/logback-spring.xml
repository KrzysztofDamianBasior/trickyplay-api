<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- ref: https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.logging-->
    <!--    Spring Boot provides a number of logback configurations that can be included in your own configuration.-->
    <!--    The following files are provided under org/springframework/boot/logging/logback/:-->
    <!--        defaults.xml - Provides conversion rules, pattern properties and common logger configurations.-->
    <!--        console-appender.xml - Adds a ConsoleAppender using the CONSOLE_LOG_PATTERN.-->
    <!--        file-appender.xml - Adds a RollingFileAppender using the FILE_LOG_PATTERN and ROLLING_FILE_NAME_PATTERN with appropriate settings.-->
    <!--    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />-->
    <!--    <include resource="org/springframework/boot/logging/logback/file-appender.xml" />-->
    <!--    In addition, a legacy base.xml file is provided for compatibility with earlier versions of Spring Boot.-->
    <!--    <include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <property name="LOG_FILE" value="logs/app.log"/>

    <!-- ref: https://www.codingame.com/playgrounds/4497/configuring-logback-with-spring-boot-->
    <!-- RollingFileAppender will save the logs to different files depending on their rolling policy. This is handy as it allows the log output to be split out into various forms that you have control over. For example, you could separate the log files based on date, so you can look at errors that have occurred in the past on particular dates, separate on file size, so you don't need to go searching through a massive never ending file or do both and separate by date and size-->
    <appender name="FILE-ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE}</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/archived/app.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- each archived file, size max 2KB -->
            <maxFileSize>2KB</maxFileSize>
            <!-- total size of all archive files, if total size > 20KB,
				it will delete old archived file -->
            <totalSizeCap>20KB</totalSizeCap>
            <!-- 60 days to keep -->
            <maxHistory>60</maxHistory>

            <!-- Below SizeAndTimeBasedFNATP example is deprecated, it may still work, but it is better to use the above new SizeAndTimeBasedRollingPolicy example-->
            <!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
            <!--                <maxFileSize>10MB</maxFileSize>-->
            <!--            </timeBasedFileNamingAndTriggeringPolicy>            -->
        </rollingPolicy>

        <!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>

        <!-- ref: https://www.codingame.com/playgrounds/4497/configuring-logback-with-spring-boot-->
        <!-- TimeBasedRollingPolicy will create a new file based on date. The code below will create a new file each day and append the date to the name of the log file by using the %d notation. The format of the %d notation is important as the rollover time period is inferred from it. The example below will rollover each day, but to rollover monthly instead a different pattern of %d{MM-yyyy} could be used which excludes the day part of the date. Different roll over periods can be used not just daily or monthly due to the period being inferred, as long as the format inside the %d notation coheres to what SimpleDateFormat allows.-->
        <!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--            <fileNamePattern>-->
        <!--                ${LOG_PATH}/archived/log_%d{dd-MM-yyyy}.log-->
        <!--            </fileNamePattern>-->
        <!--            <maxHistory>10</maxHistory>-->
        <!--            <totalSizeCap>100MB</totalSizeCap>-->
        <!--        </rollingPolicy>-->
        <!-- maxHistory specifies how long the archived log files will be kept before they are automatically deleted. The time they are kept for depends on the rollover time period specified in the file name, so in the above example the rollover period is daily allowing a maximum of 10 days worth of archived logs to be stored before they are deleted. -->
        <!-- totalSizeCap limits the maximum size of all archived log files, it requires the maxHistory property to be set with maxHistory taking precedence over totalSizeCap when removing archived files.-->

        <!-- ref: https://www.codingame.com/playgrounds/4497/configuring-logback-with-spring-boot-->
        <!-- To rollover only on file size a rolling policy of FixedWindowRollingPolicy and a triggering policy of SizeBasedTriggeringPolicy need to be used. -->
        <!--        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
        <!--            <fileNamePattern>-->
        <!--                ${LOG_PATH}/log_%i.log-->
        <!--            </fileNamePattern>-->
        <!--            <minIndex>2</minIndex>-->
        <!--            <maxIndex>3</maxIndex>-->
        <!--        </rollingPolicy>-->
        <!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--            <maxFileSize>1KB</maxFileSize>-->
        <!--        </triggeringPolicy>-->
        <!--        The optional properties of minIndex and maxIndex found in the FixedWindowRollingPolicy specify minimum and maximum value that %i can take in the log file names. Therefore, in the above example when the logs are rolled over they can take the name log_2.log and log_3.log-->
        <!--        The process of generating the log files is as follows; the log.log file will take all new log inputs and when the maxFileSize is reached log.log is renamed to the archived file log_2.log and a new log.log file is created, when log_2.log has also reached the max size all log files are renamed and shifted along one with a new log.log file being created again. This process will continue if the maxIndex is not set, but when it is the log file with the specified maximum index is deleted (it contains the oldest messages) at the point when another archive file should be created. Following the same example from above this means when log_4.log should be created log_3.log is deleted instead and all the other logs are renamed accordingly.-->
    </appender>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n
            </Pattern>
            <!-- %d - outputs the time which the log message occurred -->
            <!-- %thread - outputs the name of the thread that the log message occurred in.-->
            <!-- $-5level - outputs the logging level of the log message.-->
            <!-- %logger{36} - outputs the package + class name the log message occurred in. The number inside the brackets represents the maximum length of the package + class name. If the output is longer than the specified length it will take a substring of the first character of each individual package starting from the root package until the output is below the maximum length. The class name will never be reduced. A nice diagram of this can be found in the Conversion word docs.-->
            <!-- %M - outputs the name of the method that the log message occurred in (apparently this is quite slow to use and not recommended unless your not worried about performance or the method name is particularly important to you).-->
            <!-- %msg - outputs the actual log message.-->
            <!-- %n - line break-->
        </layout>
    </appender>

    <springProfile name="dev">
        <!-- ERROR, WARN, INFO, DEBUG, TRACE-->

        <!-- ref: https://www.codingame.com/playgrounds/4497/configuring-logback-with-spring-boot-->
        <!-- Not using additivity="false will cause the message to be printed out twice due to the root log appender and the class level appender both writing to the log. Even if the root level is ERROR by setting the class level to DEBUG it overwrites it globally and will cause the root appender to also write to DEBUG level-->
        <logger name="org.trickyplay" level="trace" additivity="false">
            <appender-ref ref="FILE-ROLLING"/>
        </logger>

        <!-- ref: https://logback.qos.ch/manual/architecture.html-->
        <!-- A logging request is said to be enabled if its level is higher than or equal to the effective level of its logger. Otherwise, the request is said to be disabled. As described previously, a logger without an assigned level will inherit one from its nearest ancestor.-->
        <logger name="org.trickyplay" level="debug" additivity="false">
            <appender-ref ref="CONSOLE"/>
        </logger>

        <root level="info">
            <appender-ref ref="FILE-ROLLING"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <springProfile name="test">
        <logger name="org.trickyplay" level="trace" additivity="false">
            <appender-ref ref="FILE-ROLLING"/>
        </logger>

        <logger name="org.trickyplay" level="debug" additivity="false">
            <appender-ref ref="CONSOLE"/>
        </logger>

        <root level="info">
            <appender-ref ref="FILE-ROLLING"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="FILE-ROLLING"/>
        </root>
    </springProfile>

    <!-- EMAIL appender-->
    <!--    <appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">-->
    <!--        <smtpHost>smtp.mailgun.org</smtpHost>-->
    <!--        <smtpPort>25</smtpPort>-->
    <!--        <STARTTLS>123</STARTTLS>-->
    <!--        <username>123</username>-->
    <!--        <password>password</password>-->
    <!--        <to>emailid</to>-->
    <!--        <from>emailid</from>-->
    <!--        <subject>TESTING: %logger{20} - %m</subject>-->
    <!--        <layout class="ch.qos.logback.classic.html.HTMLLayout"/>-->
    <!--    </appender>-->
    <!--    <logger name="org.trickyplay" level="error" additivity="false">-->
    <!--        <appender-ref ref="EMAIL"/>-->
    <!--    </logger>-->

    <!-- Logs Asynchronously -this make logging faster-->
    <!--    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">-->
    <!--        <appender-ref ref="FILE-ROLLING" />-->
    <!--    </appender>-->
    <!--    <root level="debug">-->
    <!--        <appender-ref ref="ASYNC"/>-->
    <!--    </root>-->
</configuration>
