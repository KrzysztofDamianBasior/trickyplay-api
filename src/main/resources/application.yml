spring:
  liquibase:
    change-log: classpath:db/liquibase-changeLog.xml
#    enabled: false
  datasource:
    url: jdbc:mysql://${DEFAULT_MYSQL_HOST}:${DEFAULT_MYSQL_PORT}/${DEFAULT_MYSQL_DATABASE}?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    username: ${DEFAULT_MYSQL_USERNAME}
    password: ${DEFAULT_MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
#  profiles:
#    active=dev: # a flag with information about which profile should be launched, in the case of this application it is unnecessary because the profile is set from the parameters passed in VM options, for example: -Dspring.profiles.active=dev
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
#    generate-ddl: false
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
#        dialect: org.hibernate.dialect.MySQL8Dialect
#  jmx:
#    enabled: true
server:
  port: ${DEFAULT_APPLICATION_PORT}
  error:
    # Despite NEVER being the default for server.error.include-stacktrace, if you include Spring Boot DevTools it overides to ALWAYS. If you update application.yml (or application.properties) to specify NEVER Spring Boot DevTools will respect it
    include-stacktrace: never
  ssl:
    key-password: ${SSL_KEY_PASSWORD}
    key-store-password: ${SSL_KEYSTORE_PASSWORD}
    key-store: ${SSL_KEYSTORE_PATH}
application:
  security:
    jwt:
      # ref: https://github.com/jwtk/jjwt#jwt-payload
      # the JWT specification RFC 7518, Sections 3.2 through 3.5 requires (mandates) that you MUST use keys that are sufficiently strong for a chosen algorithm. This means that JJWT - a specification-compliant library - will also enforce that you use sufficiently strong keys for the algorithms you choose. If you provide a weak key for a given algorithm, JJWT will reject it and throw an exception.
      # JWT HMAC-SHA signature algorithms HS256, HS384, and HS512 require a secret key that is at least as many bits as the algorithm's signature (digest) length per RFC 7512 Section 3.2.
      # HS256 is HMAC-SHA-256, and that produces digests that are 256 bits (32 bytes) long, so HS256 requires that you use a secret key that is at least 32 bytes long.
      secret-key: ${DEFAULT_JWT_SECRET_KEY}
      refresh-token-expiration: ${DEFAULT_REFRESH_TOKEN_EXPIRATION} # [ms]
      access-token-expiration: ${DEFAULT_ACCESS_TOKEN_EXPIRATION} # [ms]
management:
# The management.server.port is used to expose management/actuator endpoints to a different HTTP port other than the one used for running the application. And the management.port is used to port for the actuator to run while integration testing.
#  port: 8081
#  address: 127.0.0.1
#  server:
#    port used to expose actuator
#    port: 9001
#    CIDR allowed to hit actuator
#    address: 127.0.0.1
#  security:
#    enabled: true
#    role: ADMIN
  info:
    env:
      enabled: true
    build:
      enabled: true
#    git:
#      enabled: true
    java:
      enabled: true
#    os:
#      enabled: true
#  metrics:
#    tags:
#      application: ${spring.application.name}
#    export:
#      prometheus:
#        enabled: true
#    web:
#      server:
#        requests: true
  health:
    show-details: always
    rediness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint: # individually configures the endpoint identified by endpointId, which may define its own unique configurable properties.
  #    The management.endpoint (singular) properties apply to individual actuator endpoints, allowing each endpoint to define its own configurable properties. Specific configurations live under management.endpoint.<endpointId>.*. Hence, it is effectively a namespace reserved for unique and identifiable endpoint
#    env:
#      show-values: when-authorized
#    metric:
#      web:
#        server:
#          request: true
#      cache:
#        enabled: true
#      jvm:
#        enabled: true
#      export:
#        prometheus:
#          enabled: true
#    prometheus:
#      enabled: true # instrumentation is skipped entirely for disabled endpoints
#    shutdown:
#      enabled: true
    health:
#      #      roles: ["ADMIN"]
#      show-details: always
      probes:
        enabled: true
  endpoints: # globally configures common endpoint properties and the ways in which endpoints may be accessed.
    #    management.endpoints (plural) properties configure how and where actuator endpoints are exposed. These have more to do with configuring actuator as a whole, and inform the way it will integrate with your application and tools
    #
    #  we can customize each endpoint with properties using the format
    #  endpoints.[endpoint name].[property to customize]
    #
    #three properties are available:
    #  id: by which this endpoint will be accessed over http
    #  enabled: if true, then it can be accessed
    #  sensitive: if true, then need the authorization to show crucial information over HTTP
    #
    #For example, adding the following properties will customize the /beans endpoint:
    #  endpoints.beans.id = springbeans
    #  endpoints.beans.sensitive = false
    #  endpoints.beans.enabled = true
#    health:
    # Some information returned by HealthIndicator is sensitive in nature, but we can configure
#      sensitive: false
    web:
#      base-path: /actuator
      exposure:
        include: ["prometheus", "info", "health", "metrics"]
#        exclude: beans
info:       # we can customize the data shown by the /info endpoint:
  app:
    name: trickyplay-api
    description: api
    version: 1.0.0
    builddate: 2024-05-07
  #    website: trickyplay-api.krzysztofbasior.com