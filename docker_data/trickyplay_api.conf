# nginx proxy publish a single port, and then user can access the services at specific paths (like http://localhost:8090/prometheus/, http://localhost:8090/grafana/, etc
server {
    # By default, nginx listens only on port 80, here we create a process that listens on additional ports
    listen 80 default_server;
    listen [::]:80 default_server;
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;

    # Nginx test the request's header field "Host" to determine which server the request should be routed to, if its value does not match any server name, or the request does not contain this header field at all, then nginx will route the request to the default server for this port. The default server is the first one. It can also be set explicitly which server should be default, with the default_server parameter in the listen directive. If request without the "Host" header field should not be allowed, a server that just drops the request can be defined by server_name ""; When server name is set to an empty string that will match requests wihtout the Host header field, and a special nginx non standard code 444 is returned that closes that connection, since 0.8 version, this is the default setting for the server name, in earlier versions, the machine's hostname was used as a default server_name.
    # server_name _; -defines an invalid server names which never intersect with any real name. It is just a non-match.
    server_name localhost;

    access_log /var/log/nginx/domain.log;
    error_log /var/log/nginx/domain-error.log;

#         proxy_set_header Authorization "";
#         proxy_set_header username   $remote_user;

    # when nginx selects a location block to serve it first checks location directives that specify prefizes, remembering location with the longest prefix, and then checks regular expressions, if there is a match with regex, nginx picks the one remembered earlier
    location / {
        proxy_pass https://trickyplay-api:9090/;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

#         auth_basic off;
    }

# below a quote from- https://www.robustperception.io/blog/, more information in the book Prometheus Up and Running
# Look at the example:
#    location /prometheus/ {
#      proxy_pass :9090/prometheus/;
#    }
# Nginx will include the /prometheus/ prefix when passing on requests to Prometheus. To make this work you'd need to run Prometheus like: prometheus --web.external-url :9090/prometheus/
# You should be aware that with this external URL, the /prometheus/ path prefix will be required for all HTTP access to Prometheus. What if the reverse proxy is sending a different path than the user is using? By default Prometheus (and Alertmanager) presumes that any path in the external URL is a prefix path that'll be in all requests that are sent to it. However that's not always the case, and the --web.route-prefix flag allows you to control this more granularly. Let's say you have Prometheus running on it's usual port, and Nginx installed with the following configuration:
#    location /prometheus/ {
#      proxy_pass :9090/;
#    }
# this will strip off the /prometheus/ before passing on requests to Prometheus. In this case you need to specify the URL the user is using in their browser, and also that the prefix Prometheus will see in it's HTTP requests is not /prometheus/ but rather just the empty /:
# prometheus --web.external-url :19090/prometheus/ --web.route-prefix=/
# As before, Prometheus will be accessible on :19090/prometheus/.
    location /prometheus/ {
#         rewrite ^/prometheus(/.*)$ $1 break;
        proxy_pass http://prometheus:9090/;
#         proxy_pass :9090/prometheus/;

# The ngx_http_auth_basic_module module allows limiting access to resources by validating the user name and password using the “HTTP Basic Authentication” protocol.
        auth_basic "Administrator’s Area";
        auth_basic_user_file /run/secrets/nginx_auth_file;
#         auth_basic_user_file /etc/nginx/.htpasswd;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /grafana/ {
        proxy_pass http://grafana:3000/grafana/;
        proxy_set_header Host $host;
        rewrite  ^/grafana/(.*)  /$1 break;

#         include /etc/nginx/proxy.conf;
    }

    location /phpmyadmin {
#         rewrite ^/phpmyadmin(/.*)$ $1 break;
        proxy_pass http://phpmyadmin:80/;

        auth_basic "Administrator’s Area";
        auth_basic_user_file /run/secrets/nginx_auth_file;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
   }
}


